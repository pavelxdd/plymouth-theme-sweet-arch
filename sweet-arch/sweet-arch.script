fun set_scaled_sprite(sprite, image, zoom) {
    sprite.SetImage(image.Scale(image.GetWidth() * zoom, image.GetHeight() * zoom));
}

fun position_sprite(sprite, x, y) {
    sprite.SetX(Window.GetWidth() * x - sprite.GetImage().GetWidth() / 2);
    sprite.SetY(Window.GetHeight() * y - sprite.GetImage().GetHeight() / 2);
}

fun ease_coefficient(percent) {
    return (percent * percent) / (percent * percent + (1 - percent) * (1 - percent));
}

fun ease_value(min, max, percent) {
    return min + ease_coefficient(percent) * (max - min);
}

fun animate_in_zoom(sprite, image, min, max, percent, x, y) {
    set_scaled_sprite(sprite, image, ease_value(min, max, percent));
    position_sprite(sprite, x, y);
}

fun animate_in_opacity(sprite, min, max, percent) {
    sprite.SetOpacity(ease_value(min, max, percent));
}

Window.SetBackgroundTopColor(0, 0, 0);
Window.SetBackgroundBottomColor(0, 0, 0);

LOGO = Image("logo.png");
LOGO_SPRITE = Sprite();

SPINNER = Image("spinner.png");
SPINNER_SPRITE = Sprite(SPINNER);
position_sprite(SPINNER_SPRITE, 0.5, 0.8);
SPINNER_SPRITE.SetOpacity(0);

counter = 0;
MIN_ITERATIONS = 150;
MAX_ITERATIONS = 250;

fun animate() {
    ++counter;
    SPINNER_SPRITE.SetImage(SPINNER.Rotate((counter % 100) * 0.06283));
    if (MIN_ITERATIONS < counter && counter <= MAX_ITERATIONS) {
        percent = (counter - MIN_ITERATIONS) / (MAX_ITERATIONS - MIN_ITERATIONS);

        animate_in_opacity(SPINNER_SPRITE, 0, 1, percent);
        animate_in_opacity(LOGO_SPRITE, 0, 1, percent);
        animate_in_zoom(LOGO_SPRITE, LOGO, 0, 1, percent, 0.5, 0.45);
    }
}

Plymouth.SetRefreshFunction(animate);

fun password_dialogue_setup(prompt) {
    local.bullet_image;
    local.entry;
    local.label;

    bullet_image = Image("dot.png");

    label.image = Image.Text(prompt, 1, 1, 1);
    label.sprite = Sprite(label.image);
    position_sprite(label.sprite, 0.5, 0.6);
    label.sprite.SetZ(10000);

    entry.image = Image("entry.png");
    entry.sprite = Sprite(entry.image);
    position_sprite(entry.sprite, 0.5, 0.6);
    entry.sprite.SetY(entry.sprite.GetY() + label.image.GetHeight() + 2);
    entry.sprite.SetZ(10000);

    global.password_dialogue = local;
}

fun password_dialogue_opacity(opacity) {
    global.password_dialogue.opacity = opacity;
    local = global.password_dialogue;

    entry.sprite.SetOpacity(opacity);
    label.sprite.SetOpacity(opacity);

    if (bullets) {
        for (index = 0; bullets[index]; index++) {
            bullets[index].sprite.SetOpacity(opacity);
        }
    }
}

fun display_password_dialogue(prompt, bullets) {
    if (!global.password_dialogue)
        password_dialogue_setup(prompt);
    password_dialogue_opacity(1);

    bullet_width = password_dialogue.bullet_image.GetWidth();
    bullet_y = password_dialogue.entry.sprite.GetY() +
               password_dialogue.entry.image.GetHeight() / 2 -
               password_dialogue.bullet_image.GetHeight() / 2;

    margin = bullet_width;
    spaces = Math.Int((password_dialogue.entry.image.GetWidth() - (margin * 2)) / (bullet_width / 2));

    bullets_area.width = margin + spaces * (bullet_width / 2);
    bullets_area.x = Window.GetX() + Window.GetWidth() / 2 - bullets_area.width / 2;

    if (bullets > spaces)
        bullets = spaces;

    for (index = 0; password_dialogue.bullets[index] || index < bullets; index++){
        if (!password_dialogue.bullets[index]) {
            password_dialogue.bullets[index].sprite = Sprite(password_dialogue.bullet_image);
            password_dialogue.bullets[index].sprite.SetX(bullets_area.x + index * bullet_width / 2);
            password_dialogue.bullets[index].sprite.SetY(bullet_y);
            password_dialogue.bullets[index].sprite.SetZ(password_dialogue.entry.z + 1);
        }

        if (index < bullets) {
            password_dialogue.bullets[index].sprite.SetOpacity(1);
        } else {
            password_dialogue.bullets[index].sprite.SetOpacity(0);
        }
    }
}

Plymouth.SetDisplayPasswordFunction(display_password_dialogue);